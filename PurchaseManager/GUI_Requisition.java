package PurchaseManager;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author PC
 */
public class GUI_Requisition extends javax.swing.JPanel {
    private int requisitionCount = 1;
    private ArrayList<PM_Requisition> requisitions = new ArrayList<>();

    
    
    /**
     * Creates new form GUI_Requisiton
     */
    public GUI_Requisition() {
        initComponents();
        loadRequisitionsFromFile();
    }
    
    private void addRequisition() {
        String itemID = itemidtxt.getText();
        String quantity = quantitytxt.getText();
        String date = datetxt.getText();
        String salesManagerID = smidtxt.getText();
        // Find the next unique requisitionID
        String requisitionID = generateUniqueRequisitionID();

        // Create and add requisition
        PM_Requisition requisition = new PM_Requisition(requisitionID, itemID, quantity, date, salesManagerID);
        requisitions.add(requisition);

        // Save the updated list to file
        saveToFile();

        // Update the table model
        DefaultTableModel model = (DefaultTableModel) requisitiontable.getModel();
        model.addRow(new Object[]{requisitionID, itemID, quantity, date, salesManagerID});

        // Clear text fields
        itemidtxt.setText("");
        quantitytxt.setText("");
        datetxt.setText("");
        smidtxt.setText("");
    }

    
    private String generateUniqueRequisitionID() {
        int maxID = 0;

        // Find the maximum existing ID from the requisitions list
        for (PM_Requisition req : requisitions) {
            String id = req.getRequisitionID();
            if (id.startsWith("PR")) {
                try {
                    int numericPart = Integer.parseInt(id.substring(2));
                    if (numericPart > maxID) {
                        maxID = numericPart;
                    }
                } catch (NumberFormatException e) {
                    // Handle invalid IDs gracefully
                    System.err.println("Invalid requisition ID: " + id);
                }
            }
        }

        // Generate the next unique ID
        return String.format("PR%03d", maxID + 1);
    }
     
    private void deleteSelectedRow(){
        int selectedRow = requisitiontable.getSelectedRow();
        if (selectedRow >= 0){
            requisitions.remove(selectedRow);
            ((DefaultTableModel) requisitiontable.getModel()).removeRow(selectedRow);
            saveToFile();
            
            
        } else{
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }    
        
    }
    
    private void saveToFile(){
        String[] requisitionStrings = requisitions.stream()
                .map(req -> req.getRequisitionID() + "," + req.getItemID() + "," + req.getQuantityRequired() + "," + req.getSalesDate() + "," + req.getSalesManagerID())
                .toArray(String[]::new);
        
        
        try {
            new PM_Requisition("", "", "", "", "").addToFile(requisitionStrings);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error saving requisitions: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadRequisitionsFromFile() {
        try (Scanner scanner = new Scanner(new File("Requisition.txt"))) {
            //Pls check filepath if requisiton table doesnt load//
            DefaultTableModel model = (DefaultTableModel) requisitiontable.getModel();
            model.setRowCount(0);
            requisitions.clear();
            
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                if(parts.length == 5){
                    requisitions.add(new PM_Requisition(parts[0], parts[1], parts[2], parts[3], parts[4]));
                    model.addRow(parts);
                }
                
            }
            
            requisitionCount = requisitions.size() + 1;
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "File not found: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        itemidtxt = new javax.swing.JTextField();
        quantitytxt = new javax.swing.JTextField();
        datetxt = new javax.swing.JTextField();
        smidtxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        requisitiontable = new javax.swing.JTable();
        addbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        loadbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(null);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(25, 18, 72, 23);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Requisition");
        add(jLabel1);
        jLabel1.setBounds(250, 40, 160, 32);

        jLabel2.setText("ItemID:");
        add(jLabel2);
        jLabel2.setBounds(86, 113, 50, 16);

        jLabel3.setText("Quantity Required:");
        add(jLabel3);
        jLabel3.setBounds(86, 179, 130, 16);

        jLabel4.setText("Date: ");
        add(jLabel4);
        jLabel4.setBounds(86, 251, 60, 16);

        jLabel5.setText("Purchase Manager ID: ");
        add(jLabel5);
        jLabel5.setBounds(86, 316, 120, 16);

        itemidtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemidtxtActionPerformed(evt);
            }
        });
        add(itemidtxt);
        itemidtxt.setBounds(219, 110, 237, 22);
        add(quantitytxt);
        quantitytxt.setBounds(219, 176, 237, 22);
        add(datetxt);
        datetxt.setBounds(219, 248, 237, 22);
        add(smidtxt);
        smidtxt.setBounds(219, 313, 237, 22);

        requisitiontable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Requisition ID", "ItemID", "Quantity", "Date", "Sales Manager ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requisitiontable);

        add(jScrollPane1);
        jScrollPane1.setBounds(86, 416, 488, 328);

        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });
        add(addbtn);
        addbtn.setBounds(219, 375, 72, 23);

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });
        add(deletebtn);
        deletebtn.setBounds(384, 375, 72, 23);

        loadbtn.setText("Load");
        loadbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadbtnActionPerformed(evt);
            }
        });
        add(loadbtn);
        loadbtn.setBounds(295, 762, 72, 23);

        jLabel6.setText(" e.g. : I001");
        add(jLabel6);
        jLabel6.setBounds(219, 138, 70, 16);

        jLabel7.setText("e.g. : SM001");
        add(jLabel7);
        jLabel7.setBounds(219, 341, 80, 16);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        javax.swing.SwingUtilities.getWindowAncestor(this).dispose();
        PMmenu PMmenupage = new PMmenu();
        PMmenupage.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        deleteSelectedRow();
    }//GEN-LAST:event_deletebtnActionPerformed

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        addRequisition();
    }//GEN-LAST:event_addbtnActionPerformed

    private void itemidtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemidtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemidtxtActionPerformed

    private void loadbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadbtnActionPerformed
        loadRequisitionsFromFile();
    }//GEN-LAST:event_loadbtnActionPerformed
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                javax.swing.JFrame frame = new javax.swing.JFrame("Requisition Management");
                frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
                frame.setContentPane(new GUI_Requisition());
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
                frame.setLocation(0,0);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField datetxt;
    private javax.swing.JButton deletebtn;
    private javax.swing.JTextField itemidtxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadbtn;
    private javax.swing.JTextField quantitytxt;
    private javax.swing.JTable requisitiontable;
    private javax.swing.JTextField smidtxt;
    // End of variables declaration//GEN-END:variables

    private static class setVisible {

        public setVisible(boolean b) {
        }
    }
}
